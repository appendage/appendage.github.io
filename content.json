{"meta":{"title":"贾寒的技术博客","subtitle":"","description":"勿忘初心","author":"Jia Han","url":"http://yoursite.com"},"pages":[{"title":"All tags","date":"2017-04-19T08:30:21.000Z","updated":"2017-04-19T08:35:19.147Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"关于我","date":"2017-04-19T07:23:37.000Z","updated":"2017-05-31T00:59:19.654Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"简介贾寒，男，90后，linux工程师邮箱：jh_jiahan@163.com梦想： 会的多一点，懂得多一点，会的在多一点，懂的在多一点！"},{"title":"分类","date":"2017-04-19T07:38:17.000Z","updated":"2017-04-19T07:39:38.790Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"docker","date":"2017-06-08T00:35:37.040Z","updated":"2017-06-08T05:28:23.452Z","comments":true,"path":"2017/06/08/docker/","link":"","permalink":"http://yoursite.com/2017/06/08/docker/","excerpt":"","text":"安装DockerDocker有两个版本：社区版（CE)和企业版(EE)。 Install Docker for Debian先决条件Debian不支持Docker EE。 操作系统要求要安装Docker,您需要64为版本的Debian或Raspbian版本之一： Stretch(testing) jessie 8.0(LTS) / Raspbian jessie Wheezy 7.7(LTS) 内核版本至少3.10Docker支持x86_64和armhf架构的jessie和Stretch 卸载旧版本较老版本的Docker被称为docker或docker-engine。如果这些已安装，请卸载它们： $ apt-get remove docker docker-engine 安装Docker CE您可以根据需要以不同的方式安装Docker CE： 大多数用户 设置了Docker的存储库并从中安装，以方便安装和升级任务。这是推荐的方法。 一些用户下载DEB软件包并手动安装并手动管理升级。这在没有访问互联网的系统上安装Docker的情况下是有用的。使用存储库安装在新主机上首次安装Docker CE之前，需要设置Docker存储库。之后，可以从存储库安装和更新设置存储库 安装软件以允许apt通过HTTPS使用存储库： jessie或Stretch:`$ apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg2 \\ software-properties-common` Wheezy:`$ apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ python-software-properties` 添加Docker的官方GPG密钥： `$ curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -` 验证密钥ID是否9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88。 $ apt-key fingerprint 0EBFCD88 pub 4096R/0EBFCD88 2017-02-22 Key fingerprint = 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid Docker Release (CE deb) &lt;docker@docker.com&gt; sub 4096R/F273FCD8 2017-02-22 使用以下命令设置stable版本库 am64:$ add-apt-repository \\ &quot;deb [arch=amd64] https://download.docker.com/linux/debian \\ $(lsb_release -cs) \\ stable&quot; armhf:$ echo &quot;deb [arch=armhf] https://download.docker.com/linux/debian \\ $(lsb_release -cs) stable&quot; | \\ sudo tee /etc/apt/sources.list.d/docker.list 仅限Wheezy：Wheezy的版本add-apt-repository添加了deb-src 不存在的存储库。您需要注释掉该存储库或运行apt-get update将失败。编辑/etc/apt/sources.list。找到如下所示的行，并将其注释掉或删除它： deb-src [arch=amd64] https://download.docker.com/linux/debian wheezy stable安装DOCKER CE apt-get update apt-get install docker-ce","categories":[],"tags":[]},{"title":"（guacamole+tomcat）安装","slug":"guacamole_install","date":"2017-05-30T16:00:00.000Z","updated":"2017-05-31T01:10:08.397Z","comments":true,"path":"2017/05/31/guacamole_install/","link":"","permalink":"http://yoursite.com/2017/05/31/guacamole_install/","excerpt":"","text":"","categories":[{"name":"系统运维","slug":"系统运维","permalink":"http://yoursite.com/categories/系统运维/"}],"tags":[{"name":"guacamole","slug":"guacamole","permalink":"http://yoursite.com/tags/guacamole/"}]},{"title":"Docker搭建tomcat环境","slug":"docker_tomcat","date":"2017-05-04T09:25:33.000Z","updated":"2017-06-01T01:21:19.394Z","comments":true,"path":"2017/05/04/docker_tomcat/","link":"","permalink":"http://yoursite.com/2017/05/04/docker_tomcat/","excerpt":"1$ mkdir tomcat #新建tomcat文件夹 进入tomcat文件夹，下载apache-tomcat-7.0.77.tar.gz和jdk-8u131-linux-x64.tar.gz1234567891011121314151617$ vim Dockerfile #新建Dockerfile构建镜像 FROM debian:7 #基础镜像为debian7 MAINTAINER JiaHan &lt;jh_jiahan@163.com&gt; ENV REFRESHED 2017-05-04 ADD apache-tomcat-7.0.77.tar.gz /usr/local/ ADD jdk-8u131-linux-x64.tar.gz /usr/local/java/ ENV JAVA_HOME /usr/local/java/jdk1.8.0_131 ENV JRE_HOME /usr/local/java/jdk1.8.0_131/jre ENV CLASSPATH .:$JAVA_HOME/lib:$JRE_HOME/lib ENV PATH $PATH:$JAVA_HOME/bin ENV CATALINA_HOME /usr/local/apache-tomcat-7.0.77 EXPOSE 8080 CMD [\"/usr/local/apache-tomcat-7.0.77/bin/catalina.sh\",\"run\"]$ docker build -t docker_tomcat7$ docker images docker_tomcat7 #查看新镜像$ docker run -d -p 8080:8080 --name tomcat7 docker_tomcat7 #-p 将容器端口8080映射到宿主机8080测试 ：使用浏览器访问宿主机8080端口","text":"1$ mkdir tomcat #新建tomcat文件夹 进入tomcat文件夹，下载apache-tomcat-7.0.77.tar.gz和jdk-8u131-linux-x64.tar.gz1234567891011121314151617$ vim Dockerfile #新建Dockerfile构建镜像 FROM debian:7 #基础镜像为debian7 MAINTAINER JiaHan &lt;jh_jiahan@163.com&gt; ENV REFRESHED 2017-05-04 ADD apache-tomcat-7.0.77.tar.gz /usr/local/ ADD jdk-8u131-linux-x64.tar.gz /usr/local/java/ ENV JAVA_HOME /usr/local/java/jdk1.8.0_131 ENV JRE_HOME /usr/local/java/jdk1.8.0_131/jre ENV CLASSPATH .:$JAVA_HOME/lib:$JRE_HOME/lib ENV PATH $PATH:$JAVA_HOME/bin ENV CATALINA_HOME /usr/local/apache-tomcat-7.0.77 EXPOSE 8080 CMD [\"/usr/local/apache-tomcat-7.0.77/bin/catalina.sh\",\"run\"]$ docker build -t docker_tomcat7$ docker images docker_tomcat7 #查看新镜像$ docker run -d -p 8080:8080 --name tomcat7 docker_tomcat7 #-p 将容器端口8080映射到宿主机8080测试 ：使用浏览器访问宿主机8080端口 运行自己的Docker Registry1$ docker run -p -d -v /root/registry:/var/lib/registry --name registry 5000：5000 registry:2 提交的镜像文件默认保存在Registry容器的/var/lib/registry,将宿主机/root/registry挂载到此目录，镜像文件就保存在宿主机的/root/registry下了 提交tomcat镜像到自己的Docker Registry12$ docker tag docker_tomcat7 localhost:5000/docker_tomcat7$ docker push localhost:5000/docker_tomcat7 执行以上语句有很大可能会报错，解决办法 echo -e “DOCKER_OPTS=\\”–insecure-registry localhost:5000\\”” &gt;&gt;/etc/default/docker echo -e “{ \\”insecure-registries\\”:[\\”localhost:5000\\”] }” &gt;&gt;/etc/docker/daemon.json #新建此文件从本地Registry构建新的镜像1$ docker run -t -i localhost:5000/docker_tomcat7 /bin/bash","categories":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/categories/Docker/"}],"tags":[{"name":"docker tomcat","slug":"docker-tomcat","permalink":"http://yoursite.com/tags/docker-tomcat/"}]},{"title":"Docker入门","slug":"docker_command","date":"2017-05-02T09:25:33.000Z","updated":"2017-06-01T02:10:51.558Z","comments":true,"path":"2017/05/02/docker_command/","link":"","permalink":"http://yoursite.com/2017/05/02/docker_command/","excerpt":"&lt;name or id&gt; 容器的名称和id Docker安装Ubuntu和Debian中安装","text":"&lt;name or id&gt; 容器的名称和id Docker安装Ubuntu和Debian中安装 ATP源更新为阿里源 $ vim /etc/apt/sources.list&nbsp;&nbsp;&nbsp;&nbsp;deb http://mirrors.aliyun.com/debian/ jessie main non-free contrib&nbsp;&nbsp;&nbsp;&nbsp;deb http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib&nbsp;&nbsp;&nbsp;&nbsp;deb-src http://mirrors.aliyun.com/debian/ jessie main non-free contrib&nbsp;&nbsp;&nbsp;&nbsp;deb-src http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib$ apt-get update $$ apt-get install docker-engine -y RedHat系列版本安装CENTOS7为例 $ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo$ yum makecache Docker安装脚本1curl https://get.docker.com/ | sh 二进制安装包里包含docker二进制文件，将解压出docker文件添加到环境变量就能运行docker命令。1wget http://get.docker.com/builds/Linux/x86_64/docker-latest.tgz Docker守护进程网络安装的方法，在安装完成之后会自动已守护进程方式运行Docker1docker daemon Docker 入门创建容器12docker create --restart=always -i -t --name test_docker debian:7 #只创建容器docker run --restart=always -i -t --name test_docker debian:7 #创建并运行容器 参数说明 –restart always 无论容器的退出代码是什么，Docker都会自动重启该容器 on-failure 只有容器的退出代码为非0时，才会自动重启(非正常退出) on-failure:5 重启次数 -i 容器的STDIN是开启的 -t 为要创建的容器分配一个伪终端 -i -t 同时使用 新创建的容器能提供一个交互式shell –name 为容器指定一个名称 debian:7 如果本地没有debian7镜像，会自动下载 查询容器123docker ps #正在运行的容器docker ps -a #全部容器docker inspect &lt;name or id&gt;#查询容器的详细信息 删除容器1docker rm &lt;name or id&gt; 启动、停止、重启容器123docker start &lt;name or id&gt; #启动容器docker restart &lt;name or id&gt; #重新启动容器docker stop &lt;name or id&gt; #停止容器 Docker维护命令123456docker attach &lt;name or id&gt; #进入到容器（可能需要按enter）docker logs --tail 10 -ft &lt;name or id&gt; #查询容器日志# -t 加入时间戳docker top &lt;name or id&gt; #查询容器内的进程docker stats &lt;name or id&gt; &lt;name or id&gt; #cpu/内存/网络IO/存储IO信息，可以同时查看多个容器docker exec -d test_docker touch /root/test #在容器内部运行进程 ###使用Docker镜像和仓库1234docker search &lt;service&gt; #搜索service镜像docker pull &lt;service&gt; #拉取service镜像docker login #登录docker images #查询本地镜像","categories":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]},{"title":"pyinotify：在 Linux 中实时监控文件系统更改","slug":"pyinotify","date":"2017-04-28T07:00:33.000Z","updated":"2017-05-30T07:54:06.055Z","comments":true,"path":"2017/04/28/pyinotify/","link":"","permalink":"http://yoursite.com/2017/04/28/pyinotify/","excerpt":"依赖Linux kernel &gt;= 2.6.13 Python &gt;=2.4","text":"依赖Linux kernel &gt;= 2.6.13 Python &gt;=2.4 Linux安装pyinotifygit clone https://github.com/seb-m/pyinotify.git cd pyinotify python setup.py install 使用1234python -m pyinotify -v /usr/local/tomcat#监控/usr/local/tomcat目录变化，这样日志会输出到当前控制台nohup -m pyinotify -v /usr/local/tomcat &gt;/var/log/pyinotify.log &amp;#记录到文件并进程后台运行","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"pyinotify","slug":"pyinotify","permalink":"http://yoursite.com/tags/pyinotify/"}]},{"title":"闲来无事，django创建登录界面","slug":"django","date":"2017-04-27T01:40:33.000Z","updated":"2017-06-01T01:18:37.952Z","comments":true,"path":"2017/04/27/django/","link":"","permalink":"http://yoursite.com/2017/04/27/django/","excerpt":"环境Debian 7.5 Python 3.6.1 Django 1.11 mysql 5.5.47","text":"环境Debian 7.5 Python 3.6.1 Django 1.11 mysql 5.5.47 安装配置配置网络源为阿里源1vim /etc/apt/sources.list deb http://mirrors.aliyun.com/debian/ wheezy main non-free contrib deb http://mirrors.aliyun.com/debian/ wheezy-proposed-updates main non-free contrib deb-src http://mirrors.aliyun.com/debian/ wheezy main non-free contrib deb-src http://mirrors.aliyun.com/debian/ wheezy-proposed-updates main non-free contrib 源码安装python3.6.112345tar -zxvf Python-3.6.1.tgzcd Python-3.6.1./configure #默认安装在/usr/local/bin下make &amp;&amp; make install mv /usr/local/bin/python3.6 /usr/bin/python #将默认的python2.7更改为python3.6 源码安装Django1.11123tar -zxvf Django-1.11.tar.gzcd Django-1.11python setup.py install mysql安装(使用的网络源安装)1apt-get install mysql-server 创建web库并使用utf8编码，否则有可能中文乱码(登录mysql后执行)1CREATE DATABASE web DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; 安装PyMySQL123git clone https://github.com/PyMySQL/PyMySQL.gitcd PyMySQL &amp;&amp; python setup.py installvim web/web/__init__.py #python3不支持MySQLdb,用pymysql来代替 import pymysql pymysql.install_as_MySQLdb() 开始编码code……创建项目web1django-admin startproject web 创建app12#进入项目目录python manager startapp login 激活模型编辑web/settings.py12345678910111213141516INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'login',]ALLOWED_HOSTS = ['*'] #允许所有用户访问TEMPLATES = [ &#123; 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': ['login/templates'], #定义templates路径 'APP_DIRS': True, 'OPTIONS': &#123; …… models模型编辑login/models.py，创建数据库表结构1234567from django.db import models# Create your models here.class Person(models.Model): user = models.CharField(max_length=30) password = models.CharField(max_length=30) def __unicode(self): return self.user #返回的对象名，默认为Object Django数据类型https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.FileField 自定义models模型创建login/forms.py1234567from django import formsclass LoginForm(forms.Form): user = forms.CharField() password = forms.CharField()class RegisterForm(forms.Form): user = forms.CharField() password = forms.CharField() 在数据库中创建表1python manage.py migrate URL配置创建login/urls.py,配置登录界面和注册界面URL12345678from django.conf.urls import urlfrom django.contrib import adminfrom login import viewsurlpatterns = [ url(r'^login/', views.login, name='login'), url(r'^register/', views.register, name='register'),] views实现功能1234567891011121314151617181920212223242526272829303132333435363738394041from django.shortcuts import renderfrom django.http import HttpResponsefrom login.models import Personfrom .forms import LoginFormfrom .forms import RegisterFormfrom django.contrib import messages# Create your views here.def login(request): if request.method == 'POST': form = LoginForm(request.POST) if form.is_valid(): user = form.cleaned_data['user'] password = form.cleaned_data['password'] reluser = Person.objects.get(user=user).user relpwd = Person.objects.get(user=user).password #return render(request, 'test.html',&#123;'user':user,'password':password,'reluser':reluser&#125;) if user==reluser and password == relpwd: #messages.success(request,'登录成功') ret = \"登录成功\" return render(request, 'test.html',&#123;'user':user,'password':password,'ret':ret&#125;) else: #messages.success(request,'登录失败') ret = \"登录失败，密码错误！\" return render(request, 'test.html',&#123;'ret':ret&#125;) else: form = LoginForm() return render(request, 'login.html', &#123;'form':form&#125;)def register(request): if request.method == 'POST': form = RegisterForm(request.POST) if form.is_valid(): user = form.cleaned_data['user'] password = form.cleaned_data['password'] Person.objects.create(user=user,password=password) #messages.success(request,'注册成功') ret = \"注册成功\" return render(request, 'test.html',&#123;'ret':ret&#125;) else: form = RegisterForm() return render(request, 'register.html', &#123;'form':form&#125;) templates文件创建login/templates,并新建login.html,register.html,test.html login.html123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Login&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Login.css\"/&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"login\"&gt; &lt;h1&gt;Login&lt;/h1&gt; &lt;form method=\"post\"&gt; &#123;% csrf_token %&#125; &lt;!--防跨标签--&gt; &#123;&#123; form &#125;&#125; &lt;input type=\"submit\" value=\"登录\"&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; resiter.html1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;register&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Login.css\"/&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"login\"&gt; &lt;form method=\"post\"&gt; &#123;% csrf_token %&#125; &lt;!--防跨标签--&gt; &#123;&#123; form &#125;&#125; &lt;input type=\"submit\" value=\"确认注册\"&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; test.html12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;test&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Login.css\"/&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"login\"&gt; &#123;&#123; ret &#125;&#125; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 简单的登录界面就这样实现了，没有任何检测机制。","categories":[{"name":"Django","slug":"Django","permalink":"http://yoursite.com/categories/Django/"}],"tags":[{"name":"Django","slug":"Django","permalink":"http://yoursite.com/tags/Django/"}]},{"title":"Pacemaker+Heartbeat(双机tomcat+mysql)","slug":"pacemaker","date":"2017-04-21T01:34:33.000Z","updated":"2017-06-01T01:25:37.897Z","comments":true,"path":"2017/04/21/pacemaker/","link":"","permalink":"http://yoursite.com/2017/04/21/pacemaker/","excerpt":"Heartbeat安装依赖包12#cd到heartbeat依赖包目录执行dpkg -i *.deb #如果报错,再次执行一次 安装Heartbeat1dpkg -i heartbeat_3.0.5-3_amd64.deb","text":"Heartbeat安装依赖包12#cd到heartbeat依赖包目录执行dpkg -i *.deb #如果报错,再次执行一次 安装Heartbeat1dpkg -i heartbeat_3.0.5-3_amd64.deb 配置Heartbeatha.cf123456789101112131415161718192021222324#记录所有non-debug消息，如果启用use_logd，则此选项会被忽略logfile /var/log/ha-log#告诉heartbeat记录那些sysloglogfacility local0#如果udpport指令在bcast ucast指令的前面，则使用哪个端口进行广播，否则使用默认端口udpport 694#设置使用哪个网络接口进行UDP单播心跳检测ucast eth0 172.16.100.82#设置ping节点，ping节点用来检测网络连接ping 172.16.100.3#多久以后心跳检测决定集群中的node已经挂掉deadtime 3#在heartbeat启动后，在多长时间内宣布node是dead状态，因为有时候系统启动后，网络还需要一段时间才能启动initdead 10#指定两个心跳检测包的时间间隔keepalive 1#告诉集群中有哪些节点(主机名 uname -a)node fort1node fort2#在主节点的服务恢复后，是否把从节点的服务切换回来auto_failback off#开启Pacemaker cluster managerpacemaker respawn authkeys12auth11 sha1 tomcat Pacemaker安装依赖包12#cd到pacemaker依赖包目录dpkg -i *.deb 安装Pacemaker1dpkg -i pacemaker_1.1.7-1_amd64.deb 配置Pacemaker12345678910111213crm configure property stonith-enabled=falsecrm configure property no-quorum-policy=ignorecrm configure property start-failure-is-fatal=falsecrm configure rsc_defaults migration-threshold=1crm configure rsc_defaults failure-timeout=60crm configure primitive vip ocf:heartbeat:IPaddr2 params ip=172.16.100.80 nic=eth0 cidr_netmask=32 op start interval=0 timeout=10 op stop interval=0 timeout=10 op monitor interval=10 timeout=10 start-delay=0crm configure primitive www lsb:tomcat op start interval=0 timeout=10 op stop interval=0 timeout=10 op monitor interval=10 start-delay=0crm configure primitive mysql lsb:mysql1 op start interval=0 timeout=10 op stop interval=0 timeout=10 op monitor interval=10 start-delay=0crm configure group group1 vip wwwcrm configure location loc_tomcat_fort1 www 3: fort1crm configure location loc_mysql_fort1 www 3: fort1crm configure location loc_tomcat_fort2 mysql 2: fort2crm configure location loc_mysql_fort2 mysql 2: fort2 配置说明12345678910111213141516171819202122232425crm configure property stonith-enabled=false #如果没有stonith资源,必须设置为falsecrm configure property no-quorum-policy=ignore#如果是两个节点必须设置为ignore，否则不能正常运行crm configure property start-failure-is-fatal=false #允许设置下面参数crm configure rsc_defaults migration-threshold=1#节点上的此资源应发生多少故障后才能确定该节点没有资格主管此资源crm configure rsc_defaults failure-timeout=60 #恢复故障crm configure primitive vip ocf:heartbeat:IPaddr2 params ip=172.16.100.80 nic=eth0 cidr_netmask=32 op start interval=0 timeout=10 op stop interval=0 timeout=10 op monitor interval=10 timeout=10 start-delay=0 #添加VIP资源 crm configure primitive www lsb:tomcat op start interval=0 timeout=10 op stop interval=0 timeout=10 op monitor interval=10 start-delay=0#添加tomcat资源crm configure group group1 vip www #将资源和VIP绑定到一起crm configure location loc_tomcat_fort1 www 3: fort1 设置fort1主机Tomcat分值为3crm configure location loc_mysql_fort1 mysql 3: fort1设置fort1主机Mysql分值为3crm configure location loc_tomcat_fort2 tomcat 2: fort2设置fort2主机Tomcat分值为2crm configure location loc_mysql_fort2 mysql 2: fort2设置fort2主机Mysql分值为2节点资源分值相加，VIP优先在分值大的节点上。","categories":[{"name":"集群","slug":"集群","permalink":"http://yoursite.com/categories/集群/"}],"tags":[{"name":"Pacemaker","slug":"Pacemaker","permalink":"http://yoursite.com/tags/Pacemaker/"}]}]}